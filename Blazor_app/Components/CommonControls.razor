@using Blazor_app.Services
@using PRAM_lib.Machine
@inject PramMachine pramMachine
@inject GlobalService globalService
@inject CodeEditorService codeEditorService
@inject NavigationManager NavigationManager
@inject ExecutionService execService
@inject PramCodeViewService pramCodeViewService

<div class="text-center ms-1">
    <button class="btn btn-primary ml-2" @onclick="StepBackward">Step back</button>
    <button class="btn btn-primary ml-2" @onclick="StepForward">Step forward</button>
    <button class="btn btn-primary" @onclick="Reset">Reset</button>
    <button class="btn btn-primary" @onclick="ToggleAutoRun">Toggle Auto Run</button>
    <button class="btn btn-primary" @onclick="RunUntilBreakpoint">Run Until Breakpoint</button>

    <button class="btn btn-secondary" @onclick="ClearMemories">Clear Memory</button>
</div>

@if (showPopup)
{
    <div class="overlay_popup"></div>
    <div class="popup">
        <div class="text-center font-weight-bold mb-2">
            <span>Exception:</span>
        </div>
        <div class="text-center mb-2">
            <span>@popupMessage</span>
        </div>
        <div class="text-center mt-2">
            <button class="btn btn-primary" @onclick="ClosePopup">Close</button>
        </div>
    </div>
}

@code {

    private Action<string> showPopupHandler;

    protected override void OnInitialized()
    {
        showPopupHandler = message => InvokeAsync(() => ShowPopup(message));
        SubscribeToEvents();
    }

    private void SubscribeToEvents()
    {
        execService.ShowPopup += showPopupHandler;
    }

    // Popup
    private bool showPopup = false;
    private string popupMessage = "";
    private void ShowPopup(string message)
    {
        popupMessage = message;
        showPopup = true;
        StateHasChanged();
    }

    private void ClosePopup()
    {
        showPopup = false;
    }
    // -----------------------------

    private void Reset()
    {
        execService.ResetMachine();
    }

    private void ClearMemories()
    {
        execService.ClearMemories();
    }

    private void StepForward()
    {
        execService.StepForward();
    }

    private void StepBackward()
    {
        execService.StepBackward();
    }

    private void ToggleAutoRun()
    {
        execService.ToggleAutoRun();
    }

    private void RunUntilBreakpoint()
    {
        execService.RunUntilBreakpoint();
    }

    public void Dispose()
    {
        execService.ShowPopup -= showPopupHandler;
    }
}
