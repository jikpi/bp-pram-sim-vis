@using Blazor_app.Services
@using PRAM_lib.Machine
@inject PramMachine pramMachine
@inject GlobalService globalService
@inject CodeEditorService codeEditorService
@inject NavigationManager NavigationManager

<div class="text-center ms-1">
    <button class="btn btn-primary ml-2" @onclick="NextExecutionStep">Next Execution Step</button>
    <button class="btn btn-primary" @onclick="Reset">Reset</button>
    <button class="btn btn-secondary" @onclick="ClearMemories">Clear memory</button>
    <button class="btn btn-warning" @onclick="Clear">Clear all</button>
</div>

@if (showPopup)
{
    <div class="overlay_popup"></div>
    <div class="popup">
        <div class="text-center font-weight-bold mb-2">
            <span>Exception:</span>
        </div>
        <div class="text-center mb-2">
            <span>@popupMessage</span>
        </div>
        <div class="text-center mt-2">
            <button class="btn btn-primary" @onclick="ClosePopup">Close</button>
        </div>
    </div>
}

@code {

    // Popup
    private bool showPopup = false;
    private string popupMessage = "";
    private void ShowPopup(string message)
    {
        popupMessage = message;
        showPopup = true;
    }

    private void ClosePopup()
    {
        showPopup = false;
    }
    // -----------------------------

    private void Reset()
    {
        pramMachine.Restart();
        globalService.SetLastState("Reset", GlobalService.LastStateUniform.Ok);
        globalService.ResetParallelRunningState();
    }

    private void ClearMemories()
    {
        pramMachine.ClearMemory();
    }

    private void Clear()
    {
        pramMachine.Clear();
        globalService.SetLastState("Clear", GlobalService.LastStateUniform.Ok);
        globalService.ResetParallelRunningState();
    }

    private void NextExecutionStep()
    {
        bool result = pramMachine.ExecuteNextInstruction();
        if (!result)
        {
            if (pramMachine.IsCrashed)
            {
                ShowPopup(pramMachine.ExecutionErrorMessage);
                globalService.SetLastState($"Execution stop: {pramMachine.ExecutionErrorMessage}", GlobalService.LastStateUniform.Error);
            }
            else
            {
                //not shown if machine is halted, since the if for 'halt' will override
                globalService.SetLastState($"Execution stop: {pramMachine.ExecutionErrorMessage}", GlobalService.LastStateUniform.Warning);
            }
        }
        else
        {
            globalService.SetLastState($"Next step: {pramMachine.MPIP.Value.ToString()}", GlobalService.LastStateUniform.Ok);
            int currentLine = pramMachine.GetCurrentCodeLineIndex();
            codeEditorService.UpdateExecutingLine(currentLine);
        }

        if (pramMachine.IsRunningParallel)
        {
            if (globalService.IsRunningParallel == false)
            {
                globalService.SetLastState("Parallel execution started", GlobalService.LastStateUniform.Note);
                globalService.IsRunningParallel = true;
                NavigationManager.NavigateTo("/pramview");
            }
        }
        else
        {
            if (globalService.IsRunningParallel == true)
            {
                globalService.SetLastState("Parallel execution stopped", GlobalService.LastStateUniform.Note);
                globalService.IsRunningParallel = false;
                NavigationManager.NavigateTo("/");
            }

            if (pramMachine.IsHalted)
            {
                globalService.SetLastState("Execution finished", GlobalService.LastStateUniform.Note);
            }
        }


    }

}
