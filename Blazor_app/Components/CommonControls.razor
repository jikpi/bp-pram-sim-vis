<!--
Author: Jan Kopidol

A razor component for common controls of the PRAM machine.

-->

@using Blazor_app.Services
@using PRAM_lib.Machine
@inject GlobalService globalService
@inject ExecutionService execService

<style>
    .button-group {
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
    }

    .button-group .btn:not(:last-child) {
        margin-right: 3px;
    }
</style>

<div class="button-group">
    @if (globalService.SaveHistory)
    {
        <button class="btn btn-primary" @onclick="StepBackward">@TextUIService.ExecutionStepBack</button>
    }
    <button class="btn btn-primary" @onclick="StepForward">@TextUIService.ExecutionStepForward</button>
    <button class="btn btn-primary" @onclick="RunUntilBreakpoint">@TextUIService.ExecutionStepUntilBreakpoint</button>
    <button class="btn btn-primary" @onclick="ToggleAutoRun">@TextUIService.ExecutionAutoRun</button>
    <button class="btn btn-primary" @onclick="Reset">@TextUIService.ExecutionReset</button>

    <div class="text-center">@TextUIService.ExecutionStepsCount(execService.StepsTotal, execService.StepsIncludingParallel)</div>


</div>


@code {

    protected override void OnInitialized()
    {
        SubscribeToEvents();
        ResolveResetHistorySteps();
    }

    private void SubscribeToEvents()
    {
    }

    // UNUSED Reset history steps
    bool showResetHistorySteps = false;
    private void ResolveResetHistorySteps()
    {
        if (execService.IsInHistory)
        {
            if (!showResetHistorySteps)
            {
                showResetHistorySteps = true;
                StateHasChanged();
            }
        }
        else
        {
            if (showResetHistorySteps)
            {
                showResetHistorySteps = false;
                StateHasChanged();
            }
        }
    }

    //UNUSED
    private void ResetHistorySteps()
    {
        execService.StepToPresent();
        ResolveResetHistorySteps();
    }

    private void Reset()
    {
        execService.ResetMachine();
    }

    private void ClearMemories()
    {
        execService.ClearMemories();
    }

    private void StepForward()
    {
        execService.StepForward();
        ResolveResetHistorySteps();
    }

    private void StepBackward()
    {
        execService.StepBackward();
        ResolveResetHistorySteps();
    }

    private void ToggleAutoRun()
    {
        execService.ToggleAutoRun();
        ResolveResetHistorySteps();
    }

    private void RunUntilBreakpoint()
    {
        execService.RunUntilBreakpoint();
        ResolveResetHistorySteps();
    }

    public void Dispose()
    {
    }
}
