@using Blazor_app.Services
@using PRAM_lib.Machine
@inject PramMachine pramMachine
@inject GlobalService globalService
@inject CodeEditorService codeEditorService
@inject NavigationManager NavigationManager
@inject ExecutionService execService
@inject PramCodeViewService pramCodeViewService

<div class="text-center ms-1">
    <button class="btn btn-primary ml-2" @onclick="NextExecutionStep">Next Execution Step</button>
    <button class="btn btn-primary" @onclick="Reset">Reset</button>
    <button class="btn btn-secondary" @onclick="ClearMemories">Clear memory</button>
    <button class="btn btn-warning" @onclick="Clear">Clear machine</button>
</div>

@if (showPopup)
{
    <div class="overlay_popup"></div>
    <div class="popup">
        <div class="text-center font-weight-bold mb-2">
            <span>Exception:</span>
        </div>
        <div class="text-center mb-2">
            <span>@popupMessage</span>
        </div>
        <div class="text-center mt-2">
            <button class="btn btn-primary" @onclick="ClosePopup">Close</button>
        </div>
    </div>
}

@code {

    protected override void OnInitialized()
    {
        SubscribeToEvents();
    }

    private void SubscribeToEvents()
    {
        execService.ShowPopup += ShowPopup;
    }

    // Popup
    private bool showPopup = false;
    private string popupMessage = "";
    private void ShowPopup(string message)
    {
        popupMessage = message;
        showPopup = true;
    }

    private void ClosePopup()
    {
        showPopup = false;
    }
    // -----------------------------

    private void Reset()
    {
        pramMachine.Restart();
        globalService.SetLastState("Reset", GlobalService.LastStateUniform.Ok);
        execService.ResetParallelRunningState();
    }

    private void ClearMemories()
    {
        pramMachine.ClearMemory();
        execService.RefreshMemory();
    }

    private void Clear()
    {
        pramMachine.Clear();
        globalService.SetLastState("Cleared all", GlobalService.LastStateUniform.Ok);
        execService.ResetParallelRunningState();
        execService.RefreshMemory();
    }

    private void NextExecutionStep()
    {
        execService.StepMachine();
    }

    public void Dispose()
    {
        execService.ShowPopup -= ShowPopup;
    }
}
