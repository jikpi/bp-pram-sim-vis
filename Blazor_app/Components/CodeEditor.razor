<!--
Author: Jan Kopidol

A razor component handling the code editor.

-->

@using Blazor_app.Assets
@using Blazor_app.Services
@using PRAM_lib.Machine
@inject CodeEditorService codeEditor
@inject PramMachine pramMachine

<style>
    .code-line {
        display: flex;
        align-items: center;
    }

        .code-line input[type="checkbox"] {
            margin-right: 0.6rem;
        }

</style>


@if (codeEditor.EditMode)
{
    <textarea @bind="codeEditor.Code" rows="@textAreaRows" class="form-control"></textarea>
}
else
{
    <div class="code-compiled-code-container">
        @foreach (var line in codeEditor.CompiledLines.Take(ProjectConfig.MaxCodeEditorRenderedLines))
        {
            var lineClass = GetLineClass(line.Key);
            <div class="@lineClass code-line">
                @if (lineClass.Equals("code-label-jump") || lineClass.Equals("code-comment") || lineClass.Equals("code-pardo") || lineClass.Equals("code-parend") || string.IsNullOrWhiteSpace(line.Value))
                {
                    if (string.IsNullOrWhiteSpace(line.Value))
                    {
                        <pre><a> </a></pre>
                    }
                }
                else
                {
                    <input type="checkbox" @onchange="() => ToggleBreakpoint(line.Key)" checked="@codeEditor.Breakpoints.Contains(line.Key)" />
                }
                @line.Value
            </div>
        }
    </div>
}

@code {
    private int textAreaRows => codeEditor.Code.Split('\n').Length;

    protected override void OnInitialized()
    {
        codeEditor.EditorStateChanged += StateHasChanged;
    }

    private void ToggleBreakpoint(int lineIndex)
    {
        if (codeEditor.Breakpoints.Contains(lineIndex))
        {
            codeEditor.Breakpoints.Remove(lineIndex);
        }
        else
        {
            codeEditor.Breakpoints.Add(lineIndex);
        }
    }

    private string GetLineClass(int lineIndex)
    {
        if (lineIndex == codeEditor.CurrentExecutingLine)
        {
            return "code-current-line";
        }

        if (pramMachine.InstructionRegex.Comment.IsMatch(codeEditor.CompiledLines[lineIndex]))
        {
            return "code-comment";
        }

        if (pramMachine.InstructionRegex.IfJumpToLabel.IsMatch(codeEditor.CompiledLines[lineIndex]))
        {
            return "code-jump";
        }

        if (pramMachine.InstructionRegex.JumpLabel.IsMatch(codeEditor.CompiledLines[lineIndex]))
        {
            return "code-label-jump";
        }

        if(pramMachine.InstructionRegex.JumpToLabel.IsMatch(codeEditor.CompiledLines[lineIndex]))
        {
            return "code-jump";
        }

        if (pramMachine.InstructionRegex.ParallelStart.IsMatch(codeEditor.CompiledLines[lineIndex]))
        {
            return "code-pardo";
        }

        if (pramMachine.InstructionRegex.ParallelEnd.IsMatch(codeEditor.CompiledLines[lineIndex]))
        {
            return "code-parend";
        }



        return "";
    }

    public void Dispose()
    {
        codeEditor.EditorStateChanged -= StateHasChanged;
    }
}