@using System.Collections.ObjectModel
@using Blazor_app.Services
@using PRAM_lib.Machine
@using PRAM_lib.Memory
@inject RefreshService refreshService

<table class="table">
    <thead>
        <tr>
            <th>Address</th>
            <th>Value</th>
        </tr>
    </thead>
    <tbody>
        @{
            int i = 0;
        }
        @foreach (var item in MemoryItems!)
        {
            <tr>
                <td>@i</td>
                <td><input @bind="item.Value" /></td>
            </tr>
            i++;
        }
    </tbody>
</table>

@code {
    [Parameter]
    public ObservableCollection<MemoryCell>? MemoryItems { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        SubscribeToEvents();
    }

    private void SubscribeToEvents()
    {
        if (MemoryItems != null)
        {
            MemoryItems.CollectionChanged += MemoryItems_CollectionChanged;
        }

        refreshService.MemoryRefreshed += MemoryChanged;
    }

    private void MemoryItems_CollectionChanged(object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
    {
        StateHasChanged();
    }

    private void MemoryChanged()
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        if (MemoryItems != null)
        {
            MemoryItems.CollectionChanged -= MemoryItems_CollectionChanged;
        }

        refreshService.MemoryRefreshed -= MemoryChanged;
    }

}