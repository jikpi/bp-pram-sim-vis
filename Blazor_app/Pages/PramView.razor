@page "/pramview"
@using Blazor_app.Services
@using PRAM_lib.Machine
@using System.Collections.ObjectModel
@using PRAM_lib.Processor
@inject PramMachine pramMachine
@inject CodeEditorService codeEditorService
@inject PramCodeViewService pramCodeViewService
@inject ExecutionService execService

<style>
    .halted-card-body {
    background-color: lightgray
    }

    .crashed-card-body{
        background-color: lightgoldenrodyellow;
    }
</style>

<PageTitle>PRAM view</PageTitle>

<Blazor_app.Components.CommonControls />

<!-- Pram controls -->
<div class="container-fluid my-2">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="input-group mb-3">
                <div class="input-group-prepend" style="margin-right: 10px;">

                    <div class="input-group-text">
                        <input type="checkbox" @bind="execService.ConcurrentRead" aria-label="Concurrent Read">
                        <span class="ms-2">Concurrent Read</span>

                        <input type="checkbox" @bind="execService.ConcurrentWrite" aria-label="Concurrent Write">
                        <span class="ms-2">Concurrent Write</span>
                    </div>

                    <div class="input-group-text">
                        <input type="checkbox" @bind="pramCodeViewService.ShowHaltedParallelMachines" aria-label="Show halted parallel machines">
                        <span class="ms-2">Show Halted</span>
                    </div>
                </div>
                <input type="text" class="form-control" placeholder="@this.selectViewPlaceHolder" aria-label="Enter text" @bind="selectViewParallelMachinesText" @onkeypress="SelectViewParallelMachinesKeyPressed">
                <button class="btn btn-outline-primary" type="button" @onclick="SelectViewParallelMachines">Set</button>
                <button class="btn btn-outline-secondary" type="button" @onclick="ResetViewParallelMachines">Reset</button>
            </div>
        </div>
    </div>
</div>
    <!-- Shared Memory -->
    <div class="row">
        <div class="col-md-1">
            <div class="text-center">
                <h4>Shared Memory</h4>
            </div>
            <Blazor_app.Components.Memory.AnyMemory MemoryItems="@execService.GetMemoryContextShared()" />
        </div>

        <!-- Parallel Machines -->
        <div class="col-md-11">
            <div class="row">
             @{
                int displayCount = 0;
              }
    @for (int i = 0; i < GetParallelMachineCount(); i++)
    {
        if(!pramCodeViewService.ShowHaltedParallelMachines && GetParallelMachineIsAfterHalted(i))
        {
            continue;
        }

        if(pramCodeViewService.SelectedViewParallelMachines.Count > 0 && !pramCodeViewService.SelectedViewParallelMachines.Contains(i))
        {
            continue;
        }

        var machineMemory = GetMemoryOfMachine(i);
        <div class="col-md-3 mb-4">
            <div class="card h-100">
                <div class="card-header">
                    Machine @i :
                    @if (GetParallelMachineIsHalted(i))
                    {
                        <span class="badge bg-warning">Halted</span>
                    }
                </div>
                <div class="card-body @GetCardClass(i)">
                    <h5 class="card-title">Code</h5>
                    
                    <div class="code-compiled-code-container">
                        @foreach (var line in pramCodeViewService.PramLines)
                        {
                            <div class="@GetLineClass(line.Key, i)">
                                @line.Value
                            </div>
                        }
                    </div>

                    <h5 class="card-title">Memory</h5>
                    @if (machineMemory != null)
                    {
                        <Blazor_app.Components.Memory.AnyMemory MemoryItems="@machineMemory" />
                    }
                    else
                    {
                        <p>No memory data</p>
                    }
                </div>
            </div>
        </div>
        displayCount++;
        if (displayCount % 4 == 0 && i != GetParallelMachineCount() - 1)
        {
            @:</div><div class="row mt-2">
        }
    }
            </div>

        </div>
    </div>


@code {

    public void PramCodeRefreshed()
    {
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        execService.PramCodeRefreshed += PramCodeRefreshed;
        ResolveViewParallelMachines();
    }

    public int GetParallelMachineCount()
    {
        return execService.GetParallelMachineCount();
    }

    public ObservableCollection<PRAM_lib.Memory.MemoryCell>? GetMemoryOfMachine(int machineIndex)
    {
        return execService.GetParallelMachineMemory(machineIndex);
    }

    public bool GetParallelMachineIsHalted(int machineIndex)
    {
        return execService.GetParallelMachineIsHalted(machineIndex);
    }

    public bool GetParallelMachineIsAfterHalted(int machineIndex)
    {
        return execService.GetParallelMachineIsAfterHalted(machineIndex);
    }

    private string GetLineClass(int lineIndex, int machineIndex)
    {

        //Current line coloring

        if (execService.GetParallelMachineCodeIndex(machineIndex) == lineIndex)   
        {
            return "code-current-line";
        }

        if (execService.GetParallelMachineErrorLineIndex(machineIndex) == lineIndex)   
        {
            return "code-error-line";
        }

        //Regex coloring

        if (pramMachine.InstructionRegex.Comment.IsMatch(pramCodeViewService.PramLines[lineIndex]))
        {
            return "code-comment";
        }

        if (pramMachine.InstructionRegex.IfJumpTo.IsMatch(pramCodeViewService.PramLines[lineIndex]))
        {
            return "code-jump";
        }

        if (pramMachine.InstructionRegex.JumpToLabel.IsMatch(pramCodeViewService.PramLines[lineIndex]))
        {
            return "code-label-jump";
        }

        return "";
    }

    private string GetCardClass(int machineIndex)
    {
        if (execService.GetParallelMachineIsHalted(machineIndex))
        {
            return "halted-card-body";
        }

        if (pramMachine.GetParallelMachineIsCrashed(machineIndex))
        {
            return "crashed-card-body";
        }

        return "";
    }

    //## Parallel Machines selection view
    private string selectViewParallelMachinesText = "";
    private string selectViewPlaceHolder = "";
    private void ResolveViewParallelMachines()
    {
        selectViewParallelMachinesText = "";

        if(pramCodeViewService.SelectedViewParallelMachines.Count == 0)
        {
            selectViewPlaceHolder = "Displaying all. Enter indexes like '0,1,2,4-10,odd 10-20, even 20-30, ...'";
            StateHasChanged();
        }
        else
        {
            selectViewPlaceHolder = "🟧 Displaying: " + string.Join(", ", pramCodeViewService.SelectedViewParallelMachines) + "; Begin with '+' to add.";
            StateHasChanged();
        }
    }

    private void SelectViewParallelMachines()
    {
        pramCodeViewService.SelectParallelMachines(selectViewParallelMachinesText);
        ResolveViewParallelMachines();
    }

    private void ResetViewParallelMachines()
    {
        pramCodeViewService.SelectedViewParallelMachines.Clear();
        ResolveViewParallelMachines();
    }

    private async Task SelectViewParallelMachinesKeyPressed(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")
        {
            SelectViewParallelMachines();
        }
    }

    //-----------------------------------------------

    public void Dispose()
    {
        execService.PramCodeRefreshed -= PramCodeRefreshed;
    }
}
