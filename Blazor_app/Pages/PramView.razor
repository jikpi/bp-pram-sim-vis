<!--
Author: Jan Kopidol

A major razor component for displaying parallel machine(s) state and memory, and relevant controls.

-->

@page "/pramview"
@using Blazor_app.Services
@using PRAM_lib.Machine
@using System.Collections.ObjectModel
@using PRAM_lib.Processor
@inject PramMachine pramMachine
@inject PramCodeViewService pramCodeViewService
@inject ExecutionService execService
@inject GlobalService globalService

<style>
    .halted-card-body {
    background-color: lightgray
    }

    .crashed-card-body{
        background-color: lightgoldenrodyellow;
    }
</style>

<PageTitle>PRAM view</PageTitle>

<Blazor_app.Components.CommonControls />

<!-- Pram controls -->
<div class="container-fluid my-2">
    <div class="row justify-content-center">
        <div class="col-md-9">
            <div class="input-group mb-3">
                <div class="input-group-text d-flex align-items-center mx-2" style="gap: 20px;">

                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="concurrentReadCheckbox" @bind="execService.ConcurrentRead" aria-label="@TextUIService.PRAMViewConcurrentRead">
                        <label class="form-check-label" for="concurrentReadCheckbox">
                            @TextUIService.PRAMViewConcurrentRead
                        </label>
                    </div>

                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="concurrentWriteCheckbox" @bind="execService.ConcurrentWrite" aria-label="@TextUIService.PRAMViewConcurrentWrite">
                        <label class="form-check-label" for="concurrentWriteCheckbox">
                            @TextUIService.PRAMViewConcurrentWrite
                        </label>
                    </div>

                </div>

                <input type="text" class="form-control" placeholder="@this.selectViewPlaceHolder" aria-label="@TextUIService.PRAMViewMachineFilterTextEntry" @bind="selectViewParallelMachinesText" @onkeypress="SelectViewParallelMachinesKeyPressed">
                <button class="btn btn-outline-primary" type="button" @onclick="SelectViewParallelMachines">@TextUIService.PRAMViewMachineFilterTextSet</button>
                <button class="btn btn-outline-secondary" type="button" @onclick="ResetViewParallelMachines">@TextUIService.Reset</button>

                <div class="input-group-text d-flex align-items-center mx-2" style="gap: 20px;">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="showHaltedCheckbox" @bind="pramCodeViewService.ShowHaltedParallelMachines" aria-label="@TextUIService.PRAMViewShowHalted">
                        <label class="form-check-label" for="showHaltedCheckbox">
                            @TextUIService.PRAMViewShowHalted
                        </label>
                    </div>   
                </div>
            </div>
        </div>
    </div>
</div>
    <!-- Shared Memory -->
    <div class="row">
        <div class="col-md-1">
            <div class="text-center">
                <h4>@TextUIService.MemorySharedTitle</h4>
            </div>
            <Blazor_app.Components.Memory.AnyMemory MemoryItems="@execService.GetMemoryContextShared()" />
        </div>

        <!-- Parallel Machines -->
        <div class="col-md-11">
            <div class="row">
             @{
                int displayCount = 0;
              }
    @for (int i = 0; i < GetParallelMachineCount(); i++)
    {

        if(displayCount > 300)
                {
                    continue;
                }


                if (!pramCodeViewService.ShowHaltedParallelMachines && GetParallelMachineIsAfterHalted(i))
                {
                    if(pramMachine.IllegalMemoryAccess)
                    {
                        if(execService.IsInHistory)
                        {
                            continue;
                        }
                    }
                    else
                    {
                        continue;
                    }
                }

        if(pramCodeViewService.SelectedViewParallelMachines.Count > 0 && !pramCodeViewService.SelectedViewParallelMachines.Contains(i))
        {
            continue;
        }

        var machineMemory = GetMemoryOfMachine(i);
        <div class="col-md-3 mb-4">
            <div class="card h-100">
                <div class="card-header">
                    @TextUIService.PRAMViewMachineTitle(i)
                                    @{
                    bool foundMachine = false;

                    if(pramMachine.IllegalMemoryAccess && execService.IsHistoryInLatestParallelBatch())
                    {
                        foreach (var item in pramMachine.IllegalMemoryAccesses)
                        {
                            if (item.ParallelMachineIndex == i)
                            {
                                <span class="badge bg-info">@TextUIService.PRAMViewCardIllegalMemoryAccess</span>
                                foundMachine = true;
                                break;
                            }
                        }
                    }

                    if (!foundMachine)
                    {
                        if(GetParallelMachineIsHalted(i))
                        {
                            <span class="badge bg-warning">@TextUIService.PRAMViewCardHalted</span>
                        }
                        else if (execService.IsHistoryInLatestParallelBatch() && pramMachine.GetParallelMachineIsCrashed(i))
                        {
                            <span class="badge bg-danger">@TextUIService.PRAMViewCardCrashed</span>
                        }
                    }
                }

                        </div>
                <div class="card-body @GetCardClass(i)">
                    <h5 class="card-title">@TextUIService.PRAmViewCodeTitle</h5>
                    
                    <div class="code-compiled-code-container">
                @{
                    bool imaMachine = false;
                    int? lineIndex = -1;
                    if(!execService.IsInHistory && pramMachine.IllegalMemoryAccess && execService.IsHistoryInLatestParallelBatch())
                    {
                        lineIndex = pramMachine.IllegalMemoryAccesses.Where(x => x.ParallelMachineIndex == i).FirstOrDefault()?.CodeLineIndex;
                        imaMachine = lineIndex != null;
                    }

                    bool primaryLineIndicator = false;
                    int lineCountDown = globalService.FixedCodeLength;
                    bool startedCountDown = false;
                    const string fillerLine = " ";
                    foreach (var line in pramCodeViewService.PramLines)
                    {

                        if(globalService.FixedCode)
                        {
                        if(primaryLineIndicator && !startedCountDown)
                        {
                            startedCountDown = true;
                        }

                        if(startedCountDown)
                        {
                            if(lineCountDown > 0)
                            {
                                lineCountDown--;
                            }
                        }

                        if(lineCountDown == 0)
                        {
                            break;
                        }
                        }

                        if (imaMachine && (line.Key == lineIndex))
                        {
                            <div class="code-ima-line">
                                @line.Value
                            </div>
                            primaryLineIndicator = true;
                        }
                        else
                        {
                            string lineClass = GetLineClass(line.Key, i, out primaryLineIndicator);

                            if(globalService.FixedCode)
                            {
                                if(!primaryLineIndicator && !startedCountDown)
                                {
                                    continue;
                                }
                            }

                            <div class="@lineClass">
                                    @line.Value
                            </div>
                        }
                    }  

                    if(globalService.FixedCode)
                    {
                        int j = 0;
                        for(; j < lineCountDown - 1; j++)
                        {
                            <div class="code-comment">
                                @fillerLine
                            </div>
                        }

                    }
                    }

                    </div>

                    <h5 class="card-title">@TextUIService.PRAMViewMemoryTitle</h5>
                    @if (machineMemory != null)
                    {
                        <Blazor_app.Components.Memory.AnyMemory MemoryItems="@machineMemory" />
                    }
                    else
                    {
                        <p>No memory data</p>
                    }
                </div>
            </div>
        </div>
        displayCount++;
        if (displayCount % 4 == 0 && i != GetParallelMachineCount() - 1)
        {
            @:</div><div class="row mt-2">
        }
    }
            </div>

        </div>
    </div>


@code {

    public void PramCodeRefreshed()
    {
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        execService.PramCodeRefreshed += PramCodeRefreshed;
        ResolveViewParallelMachines();
    }

    public int GetParallelMachineCount()
    {
        return execService.GetParallelMachineCount();
    }

    public ObservableCollection<PRAM_lib.Memory.MemoryCell>? GetMemoryOfMachine(int machineIndex)
    {
        return execService.GetParallelMachineMemory(machineIndex);
    }

    public bool GetParallelMachineIsHalted(int machineIndex)
    {
        return execService.GetParallelMachineIsHalted(machineIndex);
    }

    public bool GetParallelMachineIsAfterHalted(int machineIndex)
    {
        return execService.GetParallelMachineIsAfterHalted(machineIndex);
    }

    private string GetLineClass(int lineIndex, int machineIndex, out bool primaryLineIndicator)
    {

        //Current line coloring

        if (execService.GetParallelMachineCodeIndex(machineIndex) == lineIndex)   
        {
            primaryLineIndicator = true;
            return "code-current-line";
        }

        if (execService.GetParallelMachineErrorLineIndex(machineIndex) == lineIndex)   
        {
            primaryLineIndicator = true;
            return "code-error-line";
        }

        //Regex coloring

        if (pramMachine.InstructionRegex.Comment.IsMatch(pramCodeViewService.PramLines[lineIndex]))
        {
            primaryLineIndicator = false;
            return "code-comment";
        }

        if (pramMachine.InstructionRegex.IfJumpToLabel.IsMatch(pramCodeViewService.PramLines[lineIndex]))
        {
            primaryLineIndicator = false;
            return "code-jump";
        }

        if (pramMachine.InstructionRegex.JumpLabel.IsMatch(pramCodeViewService.PramLines[lineIndex]))
        {
            primaryLineIndicator = false;
            return "code-label-jump";
        }

        if(pramMachine.InstructionRegex.JumpToLabel.IsMatch(pramCodeViewService.PramLines[lineIndex]))
        {
            primaryLineIndicator = false;
            return "code-jump";
        }

        primaryLineIndicator = false;
        return "";
    }

    private string GetCardClass(int machineIndex)
    {
        if (execService.GetParallelMachineIsHalted(machineIndex))
        {
            return "halted-card-body";
        }

        if (pramMachine.GetParallelMachineIsCrashed(machineIndex) && !execService.IsInHistory)
        {
            return "crashed-card-body";
        }

        return "";
    }

    //## Parallel Machines selection view
    private string selectViewParallelMachinesText = "";
    private string selectViewPlaceHolder = "";
    private void ResolveViewParallelMachines()
    {
        selectViewParallelMachinesText = "";

        if(pramCodeViewService.SelectedViewParallelMachines.Count == 0)
        {
            selectViewPlaceHolder = TextUIService.PRAMViewMachineFilterDisplayingAll;
            StateHasChanged();
        }
        else
        {
            selectViewPlaceHolder = TextUIService.PRAMViewMachineFilterDisplayingMessage(string.Join(", ", pramCodeViewService.SelectedViewParallelMachines));

            if(selectViewPlaceHolder.Length > 200)
            {
                selectViewPlaceHolder = selectViewPlaceHolder.Substring(0, 200) + "...";
            }
            StateHasChanged();
        }
    }

    private void SelectViewParallelMachines()
    {
        pramCodeViewService.SelectParallelMachines(selectViewParallelMachinesText);
        ResolveViewParallelMachines();
    }

    private void ResetViewParallelMachines()
    {
        pramCodeViewService.SelectedViewParallelMachines.Clear();
        ResolveViewParallelMachines();
    }

    private void SelectViewParallelMachinesKeyPressed(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")
        {
            SelectViewParallelMachines();
        }
    }

    //-----------------------------------------------

    public void Dispose()
    {
        execService.PramCodeRefreshed -= PramCodeRefreshed;
    }
}
