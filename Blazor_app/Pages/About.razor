<!--
Author: Jan Kopidol

A major razor component for about page.

-->
@page "/about"

<style>
    .text-container-center {
        max-width: 800px;
        margin: 0 auto;
        text-align: left;
    }
</style>

<div class="container mt-3">
    <h3 class="text-center mb-4">About</h3>

    <div class="d-flex flex-column align-items-center text-container-center">
        <h4 class="text-center">Info</h4>
        <p>By Jan Kopidol</p>
        <p>
            This application is a capable PRAM abstract machine simulator, supporting the variants EREW, CREW, CRCW (Priority, Arbitrary, Common). Code is executed synchronously.
            This model starts as a RAM machine that can launch parallel machines, thus optionally allowing elegant managment of resources and parallel machines, simplyfying the code of parallel machines. The RAM that is launched at the beginning is referred to as "master RAM".
        </p>
        <h4 class="text-center">Getting started</h4>
        <p>
            The user can create a PRAM machine code, run the simulation, and view the results.
        </p>

        <h4>On the Main Page, the user may observe:</h4>
        <ul>
            <li>Status text under the navigation menu, displaying currently relevant information</li>
            <li>Common controls at the top:</li>
            <li>
                <ul>
                    <li>Step Back: Go backwards in the machine execution progress</li>
                    <li>Step Forward: Go forwards in the machine execution progress</li>
                    <li>Run until breakpoint: Run the machine until a breakpoint is hit or halts</li>
                    <li>Toggle auto run: Run the machine automatically</li>
                    <li>Reset the machine: Reset the machine, without clearing memory. (Local memory in parallel machines is cleared). If the user wishes to reset the entire machine (get its original state), the "stash to memory" functionality in settings can be used.</li>
                    <li>Current run statistics, such as the number of currently running parallel machines, and the total number of steps taken</li>
                </ul>
            </li>
            <li>The code textbox, which changes after compilation into user friendly code view box</li>
            <li>
                <ul>
                    <li>Compilation button, that compiles the code</li>
                    <li>Cancel button, that returns the editor to its previous state</li>
                    <li>Edit button if the machine was compiled, that unlocks the text box to edit / write new code.</li>
                </ul>
            </li>
            <li>Memory view, that displays the memory of the machine and allows the user to edit it</li>
            <li>
                <ul>
                    <li>It can be cleared with the clear button above it</li>
                    <li>New cells can be added with the + button under it.</li>
                </ul>
            </li>
        </ul>

        <h4>To start:</h4>
        <ul>
            <li>On the main page, write the code into the desiganted text box</li>
            <li>Compile the code. If it doesn't succesfully compile, the bad line will be highlighted.</li>
            <li>The machine can now be launched. The user can either:</li>
            <li>
                <ul>
                    <li>Run the machine step by step</li>
                    <li>Run the machine until a breakpoint is hit (or unitl it halts if there are no breakpoints)</li>
                    <li>Toggle auto run, which will step the machine automatically</li>
                </ul>
            </li>
            <li>After each step, the state of the machine is updated.</li>
            <li>
                <ul>
                    <li>The user can observe the code view highlighting the line that will be executed in the next step</li>
                    <li>The memory view will display the current memory of the machine</li>
                </ul>
            </li>
            <li>Should the machine crash, the problematic line will be highlighted, and the error message will be shown in the status text.</li>
            <li>
                The machine may launch parallel machines after executing an instruction to do so, after which the page is switched to "PRAM View", or back to "Main Page" after they have all halted.
            </li>
        </ul>

        <h4>On the PRAM View page, the user may observe: </h4>
        <ul>
            <li>The common controls, which are the same as on the home page</li>
            <li>The parallel concurency / exclusivity toggle checkboxes</li>
            <li>A textbox to filter which parallel machines should be displayed based on their index</li>
            <li>
                <ul>
                    <li>
                        The user may set a new filter using the syntax as described in the textbox
                    </li>
                    <li>The user may add a new to the existing one, by starting with the '+' character followed immidiately by the new filter</li>
                    <li>The user may reset the filter</li>
                </ul>
            </li>
            <li>A checkbox to always hide/show halted parallel machines.</li>
            <li>A memory view on the left displaying shared memory</li>
            <li>Rows of boxes that show each individual launched parallel machine with:</li>
            <li>
                <ul>
                    <li>The index of the machine</li>
                    <li>The state of the machine, should it be halted, crashed, or have attempted to access the shared memory illegally (IMA - Illegal Memory Access)</li>
                    <li>The code view of each machine, with the next line to be executed highlighted</li>
                    <li>The local memory of each machine</li>
                </ul>
            </li>
            <li>Should any parallel machine/machines crash, the relevant code line will be highlighted in burgundy.</li>
            <li>Should any parallel machines access memory illegally, the relevant code line will be highlighted in orange</li>
            <li>The number of shown boxes is limited to 100.</li>
        </ul>

        <h4>Breakpoints</h4>
        <ul>
            <li>They can be set in the code view by clicking the checkbox next to the line in code view</li>
            <li>They can be removed by clicking the checkbox again</li>
            <li>They can be set and removed while the machine is running</li>
            <li>If a breakpoint is set in the parallel section of the code, it will stop executing should any parallel machine reach it</li>
        </ul>

        <h4>History</h4>
        <p>During execution, history is saved, allowing the user to step back in the execution</p>
        <ul>
            <li>The size of history is limited, and if the max size is reached, the oldest entries are dropped</li>
            <li>It can be disabled in settings to improve performance</li>
            <li>Breakpoints don't affect history in any way. If the user is viewing a record from history and "Run until breakpoint" is clicked, the machine continues where it left off.</li>
            <li>Auto step continues in history forward</li>
            <li>History is saved in any execution mode</li>
            <li>The user can jump to present machine state with the appropriate button in settings</li>
        </ul>

        <h4>Settings</h4>
        <p>Settings can be accessed from the navigation menu. The user can:</p>
        <ul>
            <li>Change relevant run configuration: </li>
            <li>
                <ul>
                    <li>Change auto step speed</li>
                    <li>Hide unset memory cells to save display space. A button is present that allows to re-hide all cells currently containing a value of 0, should they have been set in the past. Useful when exporting a machine.</li>
                    <li>Enable/Disable history</li>
                    <li>Fix parallel machine code in place to save display space by rendering only a set amount of lines, where the number of lines can be set.</li>
                    <li>Set the CRCW access type</li>
                    <li>Allow single memory cell read and write at the same time in CRCW shared memory access mode. Warning: Concurrent memory access behaviour not defined with instructions that read and write in shared memory in a single step, e.g. <code>S0 := S1 + S2</code>.</li>
                    <li>If history is being currently displayed, a button is present that steps to the present state of the machine.</li>
                </ul>
            </li>
            <li>Manage machines</li>
            <li>
                <ul>
                    <li>Import a machine from a file. This automatically stashes the machine to memory in its current state.</li>
                    <li>Export the current machine to a file</li>
                    <li>Load a stashed machine from memory, loading the last machine stashed in memory. Can be used to also re-load the last loaded example machine.</li>
                    <li>Stash the current machine to memory.</li>
                    <li>Code, input memory and shared memory are taken into account. Exports only changed memory cells, including ones containing a zero value.</li>
                    <li>When loading a stashed machine from memory, the output memory is cleared and the machine is automatically compiled. If a machine is loaded and the PRAM syntax regex is non-default, a warning is displayed.</li>
                    <li>Importing a machine, or loading a stashed machine does not change the set variant of the PRAM, and it might be necessary to set it manually.</li>
                    <li>Note that "Stash / Load" in memory does not mean the currently displayed machine the user is interacting with, but a separate location in memory for machine management purposes.</li>
                </ul>
            </li>

            <li>Information and examples</li>
            <li>
                <ul>
                    <li>Load example machines. Loaded example machines are saved to memory, and can be loaded with a single click in their original state.</li>
                    <li>View this page containing information and user manual</li>
                </ul>
            </li>

            <li>Import / export PRAM syntax regex</li>
            <li>
                <ul>
                    <li>Import a regex from a file</li>
                    <li>Export a regex to a file</li>
                    <li>Reset the regex to default</li>
                </ul>
            </li>

            <li>Edit PRAM syntax regex with some validity checking</li>
        </ul>

        <h4>Parallel shared memory access / PRAM variant</h4>
        <p>
            The variant of the PRAM determines the behaviour during parallel memory access. The descriptions are in the context of "Synchronous parallel execution step", meaning that in a single step, any number of parallel machines execute a single instruction at the same time. During parallel execution, the master RAM is idle.
            Whether the memory access was legal is checked after every step, after every parallel machine has executed its instruction. In CRCW, whether reading and writing in a single step into the same memory cell at the same time is allowed can be changed in settings. ⚠ The behaviour of this functionality is not fully described here, and only experimental.
        </p>
        <ul>
            <li>EREW: Exclusive Read Exclusive Write</li>
            <li>
                <ul>
                    <li>In a single step, a shared memory cell might be only either read from or written to by a single parallel machine.</li>
                </ul>
            </li>
            <li>CREW: Concurrent Read Exclusive Write</li>
            <li>
                <ul>
                    <li>In a single step, a shared memory cell might be read from by any number of parallel machines, but only written to by a single parallel machine.</li>
                    <li>If in a single step the cell is being written to, it cannot be read from.</li>
                </ul>
            </li>

            <li>CRCW: Concurrent Read Concurrent Write</li>
            <li>
                <ul>
                    <li>Common</li>
                    <li>
                        <ul>
                            <li>In a single step, any number of parallel machines can write into the same memory cell, if they are writing the same value.</li>
                            <li>If in a single step the cell is being written to, it cannot be read from.</li>
                        </ul>
                    </li>

                    <li>Priority</li>
                    <li>
                        <ul>
                            <li>In a single step, any number of parallel machines can write into the same memory cell, but only the value of a parallel machine with the smallest index is written.</li>
                            <li>If enabled, the cell may be read from at the same time as it is being written to. The value read is determined by the priority. Should there for example be 3 parallel machines: PM0: Writing "10", PM1: Reading, PM2: Writing "20", at the end of the step "10" is written in the shared memory cell, and "20" is read by PM1. Depending on the order, the original value of the cell before any write might be read.</li>
                        </ul>
                    </li>

                    <li>Arbitrary</li>
                    <li>
                        <ul>
                            <li>In a single step, any number of parallel machines can write into the same memory cell, but only the value of a randomly chosen parallel machine is written.</li>
                            <li>If enabled, the cell may be read from at the same time as it is being written to. The value read is determined arbitrarily. Should there for example be 3 parallel machines: PM0: Writing "10", PM1: Reading, PM2: Writing "20", at the end of the step, one of the values that was being written is in the shared memory cell, and a random value that was being written is read by PM1, including the value that was in the cell originally.</li>
                        </ul>
                    </li>
                </ul>
            </li>
        </ul>

        <h4>Code syntax</h4>
        <p>The default code syntax of instructions is as follows. 'S' is a shared memory cell, 'L' is local memory cell (of a paralell machine). Result sets are explained below.</p>
        <ul>
            <li>Instructions that can be executed by both master RAM and parallel machines</li>
            <li>
                <ul>
                    <li><code>#comment</code> a comment line</li>
                    <li><code>S0 := /RESULT_SET/</code> // <code>L0 := /RESULT_SET/</code> sets memory cell to the value of result set.</li>
                    <li><code>[S0] := /RESULT_SET/</code> // <code>[L0] := /RESULT_SET/</code> sets memory cell at the index of the value in the cell in brackets to the value of result set.</li>
                    <li><code>goto :label</code> jumps to the specified label.</li>
                    <li><code>:label</code> a label which can be jumped to. The label itself is never executed - does not count as a step.</li>
                    <li><code>if (S0 == S1) goto :label</code> jumps to the specified label if the condition is true.</li>
                    <li>
                        <ul>
                            <li>the condition operators are <pre>==, !=, >=, &lt;=, >, &lt;</pre></li>
                            <li>Only either shared memory or local memory can be compared in a single if statement.</li>
                            <li>Comparing shared memory counts as a read for both cells.</li>
                        </ul>
                    </li>
                    <li><code>nop</code> no operation, does nothing when executed.</li>
                    <li><code>S{/RESULT_SET/} := /RESULT_SET/</code> // <code>L{/RESULT_SET/} := /RESULT_SET/</code> sets shared / local memory at the address of the left result set to the value of the right result set.</li>
                    <li><code>halt</code> explicitly halts the machine in which this instruction was executed.</li>
                </ul>
            </li>

            <li>Instructions that cannot be executed by parallel machines</li>
            <li>
                <ul>
                    <li><code>S0 := READ() </code> // <code>S0 := READ(0)</code> read from input memory into shared memory at the designated index / indexes. If no index is specified in input memory, it increases from 0 at every read. Specifying the index does not affect this counter.</li>
                    <li><code>WRITE(/RESULT_SET/)</code> writes the result set into the next cell of output memory. If the machine is reset, the output memory counter is also reset.</li>
                    <li><code>pardo /RESULT_SET/</code> annotates the start of parallel machine instruction block. Any number of paralell machines is launched, unless negative, then the PRAM crashes.</li>
                    <li><code>parend</code> annotates the end of parallel machine instruction block. Always in a pair with <code>pardo</code>. The instruction syntax of this one is fixed.</li>
                </ul>
            </li>

            <li>Result sets are dynamically evaluated expressions at runtime.</li>
            <li>
                <ul>
                    <li><code>S0</code> // <code>L0</code> a value of a cell.</li>
                    <li><code>0</code> a constant</li>
                    <li><code>S0 + S1</code> // <code>L0 + L1</code> // <code>S0 + L0</code> operation between cells, supported operators are +,-,*,/ (integer division),% (modulo), even between memories.</li>
                    <li><code>S0 + 10</code> // <code>L0 + 10</code> similar as above but between a cell and a constant. The positions can be switched.</li>
                    <li><code>[S0]</code> // <code>[L0]</code> takes the value of a cell with the address that is the value of the cell in brackets. Addresses in either shared or local memory.</li>
                    <li><code>S{/RESULT_SET/}</code> // <code>L{/RESULT_SET/}</code> takes the value of a cell with the address that is the value of the result set. Allows addressing between shared and local memory.</li>
                    <li><code>{i}</code> a constant holding the index of the parallel machine in which it was read, with <code>n</code> launched parallel machines from 0 to <code>n - 1</code>. Return value undefined in master RAM.</li>
                </ul>
            </li>
        </ul>
        <p>It should be noted that the precise definition of capital letters used to access the memory is as follows: All letters in master RAM access only shared memory, and all letters except 'S' in parallel RAM access local memory. For clarity, it is recommended to only use 'S' and 'L'.</p>
    </div>
</div>

@code {

}
