<!--
Author: Jan Kopidol

A major razor component for settings.

-->
@page "/settings"
@using Blazor_app.Services
@using PRAM_lib.Machine
@using System.Text
@using System.Collections.ObjectModel
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@inject GlobalService globalService
@inject PramMachine pramMachine
@inject CodeEditorService codeEditorService
@inject ExecutionService execService


<div class="container mt-3">
    <h3 class="text-center mb-4">Settings</h3>

    <div class="d-flex flex-column align-items-center">

        <div class="card mb-3" style="width: 50%;">
            <div class="card-body">
                <h3 class="card-title">@TextUIService.SettingsTitleRunConfiguration</h3>

                <div class="form-group mb-1">
                    <label for="autoStepSpeedSlider">@TextUIService.SettingsAutoStepSpeed</label>
                    <input type="range" class="form-control-range" id="autoStepSpeedSlider"
                           min="@globalService.MinAutoStepSpeed" max="@globalService.MaxAutoStepSpeed" value="@globalService.AutoStepSpeed"
                           @onchange="AutoStepSpeedChanged">
                    <span>@globalService.AutoStepSpeed</span>
                </div>

                <div class="form-group mb-1">
                    <input type="checkbox" @bind="globalService.HideMemoryCells" id="hideMemoryCellsCheckbox" aria-label="@TextUIService.SettingsHideUnsetMemoryCells">
                    <label for="hideMemoryCellsCheckbox" class="ms-2" title="@TextUIService.SettingsHideUnsetMemoryCellsTooltip">@TextUIService.SettingsHideUnsetMemoryCells</label>
                    <button type="button" class="btn btn-secondary" title="@TextUIService.SettingsHideUnsetMemoryCellsReHideTooltip"
                            @onclick="ResetZeroCellsFlag">
                        @TextUIService.SettingsHideUnsetMemoryCellsReHide
                    </button>
                </div>

                <div class="form-group mb-1">
                    <input type="checkbox" @bind="globalService.SaveHistory" id="savehistorycheckbox" aria-label="@TextUIService.SettingsSaveHistory">
                    <label for="savehistorycheckbox" class="ms-2">@TextUIService.SettingsSaveHistory</label>
                </div>

                <div class="form-group mb-1">
                    <input type="checkbox" @bind="globalService.FixedCode" id="fixedcodecheckbox" aria-label="@TextUIService.SettingsFixParallelCodeInPlace">
                    <label for="fixedcodecheckbox" class="ms-2" title="@TextUIService.SettingsFixParallelCodeInPlaceTooltip">@TextUIService.SettingsFixParallelCodeInPlace</label>
                    <label for="fixedCodeLinesSlider">:</label>
                    <input type="range" class="form-control-range" id="fixedCodeLinesSlider"
                           min="@globalService.MinFixedCodeLength" max="@globalService.MaxFixedCodeLength" value="@globalService.FixedCodeLength"
                           @onchange="FixedCodeLengthChanged">
                    <span>@globalService.FixedCodeLength</span>
                </div>

                <div class="form-group mb-1">
                    <label for="crcwAccessType">@TextUIService.SettingsCRCWAccessType</label>
                    <select id="crcwAccessType" class="form-control" @bind="pramMachine.CRCW_Access">
                        @foreach (var accessType in Enum.GetValues<PRAM_lib.Machine.PramMachine.CRCW_AccessType>())
                        {
                            <option value="@accessType">@accessType</option>
                        }
                    </select>
                </div>

                <div class="form-group mb-1">
                    <input type="checkbox" @bind="execService.SameRegisterCRCW" id="allowsinglestepcrcw" aria-label="@TextUIService.SameRegisterCRCWOption">
                    <label for="allowsinglestepcrcw" class="ms-2" title="@TextUIService.SameRegisterCRCWOptionTooltip">@TextUIService.SameRegisterCRCWOption</label>
                </div>

                @if (execService.IsInHistory)
                {
                    <div class="form-group mt-3">
                        <button class="btn btn-primary me-2 mb-2" @onclick="execService.StepToPresent">@TextUIService.ExecutionToPresent</button>
                    </div>
                }

            </div>
        </div>

        <div class="card mb-3" style="width: 50%;">
            <div class="card-body">
                <h3 class="card-title">@TextUIService.SettingsTitleMachineImportExport</h3>
                <div class="form-group mb-3">
                    <h5>Import or export to file</h5>
                    <input type="file" id="fileInput" style="display:none" />
                    <button type="button" class="btn btn-primary" @onclick="ImportMachine">
                        Import
                    </button>

                    <button type="button" class="btn btn-secondary"
                            @onclick="(() => ExportMachine())">
                        Export
                    </button>

                    <p class="mt-1">Imported machines are also stashed to memory, ready to be loaded again with a single click below.</p>
                </div>

                <div class="form-group mb-3">
                    <h5>Load or stash to memory</h5>

                    <button type="button" class="btn btn-warning" title="@TextUIService.LoadStashedMachineTooltip"
                            @onclick="ReimportMachine">
                        @TextUIService.LoadStashedMachine
                    </button>

                    <button type="button" class="btn btn-info" title="@TextUIService.StashMachineTooltip"
                            @onclick="SaveToReimportMachine">
                        @TextUIService.StashMachine
                    </button>

                    <p></p>
                </div>


            </div>
        </div>

        <div class="card mb-3" style="width: 50%;">
            <div class="card-body">
                <h3 class="card-title">@TextUIService.SettingsTitleInformation</h3>
                <p>Loaded examples are also stashed to memory, ready to be loaded again with a single click above.</p>
                <div class="input-group mb-3">
                    <select id="machineSelection" class="form-control" @onchange="MachineSelected">
                        <option selected disabled>@TextUIService.Select</option>
                        @foreach (var machine in globalService.ExampleMachines)
                        {
                            <option value="@machine.Key">@machine.Key</option>
                        }
                    </select>
                    <div class="input-group-append">
                        <button class="btn btn-primary" type="button" @onclick="OpenExampleMachine">@TextUIService.LoadTitle</button>
                    </div>
                </div>

                <button type="button" class="btn btn-primary mt-2" @onclick="NavigateToAbout">
                    @TextUIService.SettingsAboutButton
                </button>

            </div>
        </div>

        <div class="card mb-3" style="width: 50%;">
            <div class="card-body">
                <h3 class="card-title">@TextUIService.SettingsTitleRegexImportExport</h3>
                <input type="file" id="fileInput" style="display:none" />
                <button type="button" class="btn btn-primary" @onclick="ImportRegex">
                    Import
                </button>

                <button type="button" class="btn btn-secondary"
                        @onclick="ExportRegex">
                    Export
                </button>
                <button type="button" class="btn btn-warning"
                        @onclick="ResetRegex">
                    Reset
                </button>

            </div>
        </div>

        <div class="card mb-3" style="width: 50%;">
            <div class="card-body">
                <h3 class="card-title">@TextUIService.SettingsTitleEditingInstructionRegex</h3>
                <p class="card-text">@TextUIService.SettingsEditingInstructionRegexWarning</p>
                <button type="button" class="btn btn-primary" @onclick="NavigateToRegexSettings">
                    @TextUIService.SettingsEditingInstructionRegexContinue
                </button>
            </div>
        </div>
    </div>
</div>

@code {

    private void AutoStepSpeedChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newValue))
        {
            globalService.SetAutoStepSpeed(newValue);
        }
    }

    private void FixedCodeLengthChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newValue))
        {
            globalService.SetFixedCodeLength(newValue);
        }
    }

    private void ResetRegex()
    {
        pramMachine.InstructionRegex.ResetToDefault();
        globalService.SetLastState(TextUIService.StateIndicatorAllRegexReset, GlobalService.LastStateUniform.Note);
    }

    private void NavigateToRegexSettings()
    {
        navigationManager.NavigateTo("/regexsettings");
    }

    private void NavigateToAbout()
    {
        navigationManager.NavigateTo("/about");
    }

    private void ResetZeroCellsFlag()
    {
        execService.ResetZeroValuedMemoryCellsFlags();
    }

    public string ExportMachine(bool dontSaveFile = false)
    {
        StringBuilder sb = new StringBuilder();
        sb.AppendLine("MACHINECODE");
        sb.AppendLine(codeEditorService.Code);
        sb.AppendLine("MEMORYINPUT");
        for (int i = 0; i < pramMachine.GetInputMemory().Count; i++)
        {
            if (pramMachine.GetInputMemory()[i].HasBeenWrittenTo)
            {
                sb.AppendLine($"{i}:{pramMachine.GetInputMemory()[i].Value.ToString()}");
            }
            else
            {
                continue;
            }
        }

        sb.AppendLine("MEMORYSHARED");
        for (int i = 0; i < pramMachine.GetSharedMemory().Count; i++)
        {
            if (pramMachine.GetSharedMemory()[i].HasBeenWrittenTo)
            {
                sb.AppendLine($"{i}:{pramMachine.GetSharedMemory()[i].Value.ToString()}");
            }
            else
            {
                continue;
            }
        }

        string fileContent = sb.ToString();

        if (dontSaveFile)
        {
            return fileContent;
        }

        string fileName = codeEditorService.Code.Split('\n')[0];
        //check if firstCodeLine is a valid file name and if it is a comment, if not, use default name
        if (!(fileName.IndexOfAny(System.IO.Path.GetInvalidFileNameChars()) == -1 && pramMachine.InstructionRegex.Comment.IsMatch(fileName)))
        {
            fileName = $"machine {DateTime.Now:yyyyMMddHHmmss}.txt";
        }

        try
        {
            JSRuntime.InvokeVoidAsync("downloadFileFromBlazor", $"{fileName}", "text/plain", fileContent);
        }
        catch (Exception)
        {
            globalService.SetLastState(TextUIService.StateIndicatorFailedToExportMachine, GlobalService.LastStateUniform.Error);
        }

        return fileContent;
    }

    private void ImportMachine()
    {
        var dotNetReference = DotNetObjectReference.Create(this);
        JSRuntime.InvokeVoidAsync("initializeUpload", dotNetReference, "fileInput", "ReceiveMachineFileContent");
    }

    private void ReimportMachine()
    {
        if (globalService.LastImportedMachine != null)
        {
            ReceiveMachineFileContent(globalService.LastImportedMachine);
            execService.CompileCode();
            pramMachine.GetInteractiveOutputMemory.Clear();
        }
    }

    private void SaveToReimportMachine()
    {
        globalService.LastImportedMachine = ExportMachine(true);
        globalService.SetLastState(TextUIService.StateIndicatorMachineSavedForReimport, GlobalService.LastStateUniform.Note);
    }

    [JSInvokable]
    public Task ReceiveMachineFileContent(string fileContent)
    {
        if (string.IsNullOrEmpty(fileContent))
        {
            globalService.SetLastState(TextUIService.StateIndicatorFileRefusedTooLarge, GlobalService.LastStateUniform.Error);
            return Task.CompletedTask;
        }

        try
        {
            var sections = fileContent.Split(new[] { "MACHINECODE", "MEMORYINPUT", "MEMORYSHARED" }, StringSplitOptions.RemoveEmptyEntries);

            if (sections.Length < 3)
            {
                throw new FormatException(TextUIService.StateIndicatorFileFormatIncorrectOrCorrupted);
            }

            //sections[0] is code, sections[1] is input memory, sections[2] is shared memory
            codeEditorService.Code = sections[0].Trim();

            string? errorMessage = null;
            UpdateMemoryFromText(sections[1].Trim(), pramMachine.GetInteractiveInputMemory, out errorMessage);
            UpdateMemoryFromText(sections[2].Trim(), pramMachine.GetInteractiveSharedMemory, out errorMessage);

            if (errorMessage != null)
            {
                throw new FormatException(errorMessage);
            }
        }
        catch (Exception ex)
        {
            globalService.SetLastState(TextUIService.StateIndicatorFailedToImportMachine(ex.Message), GlobalService.LastStateUniform.Error);
            return Task.CompletedTask;
        }

        codeEditorService.EditCode();
        if (pramMachine.InstructionRegex.SaveToText() != globalService.DefaultRegex)
        {
            globalService.SetLastState(TextUIService.StateIndicatorMachineImportedSuccessfullyWarning, GlobalService.LastStateUniform.Warning);
        }
        else
        {
            globalService.SetLastState(TextUIService.StateIndicatorMachineImportedSuccessfully, GlobalService.LastStateUniform.Note);
        }

        globalService.LastImportedMachine = fileContent;
        navigationManager.NavigateTo("/");
        return Task.CompletedTask;
    }

    private void UpdateMemoryFromText(string memoryText, PRAM_lib.Memory.Interface.IMemory memory, out string? errorMessage)
    {
        memory.Clear();
        var lines = memoryText.Split('\n', StringSplitOptions.RemoveEmptyEntries);
        foreach (var line in lines)
        {
            var parts = line.Split(':');
            if (parts.Length == 2 && int.TryParse(parts[0], out int index) && int.TryParse(parts[1], out int value))
            {
                memory.Write(index, value);
            }
            else
            {
                errorMessage = TextUIService.StateIndicatorFailedToImportMemory;
                return;
            }
        }
        errorMessage = null;
    }

    private void ImportRegex()
    {
        var dotNetReference = DotNetObjectReference.Create(this);
        JSRuntime.InvokeVoidAsync("initializeUpload", dotNetReference, "fileInput", "ReceiveRegexFileContent");
    }

    [JSInvokable]
    public Task ReceiveRegexFileContent(string fileContent)
    {
        if (string.IsNullOrEmpty(fileContent))
        {
            globalService.SetLastState(TextUIService.StateIndicatorFileRefusedTooLarge, GlobalService.LastStateUniform.Error);
            return Task.CompletedTask;
        }

        bool result = pramMachine.InstructionRegex.LoadFromText(fileContent, out string errorMessage);

        if (!result)
        {
            globalService.SetLastState(errorMessage, GlobalService.LastStateUniform.Error);
        }
        else
        {
            globalService.SetLastState(TextUIService.StateIndicatorRegexImportedSuccessfully, GlobalService.LastStateUniform.Note);
        }

        return Task.CompletedTask;
    }

    private async Task ExportRegex()
    {
        try
        {
            string json = pramMachine.InstructionRegex.SaveToText();
            await JSRuntime.InvokeVoidAsync("downloadFileFromBlazor", "regex.txt", "text/plain", json);
        }
        catch (Exception)
        {
            globalService.SetLastState(TextUIService.StateIndicatorFailedToExportRegex, GlobalService.LastStateUniform.Error);
        }
    }

    private string selectedMachine = "";
    private void MachineSelected(ChangeEventArgs e)
    {
        if (e.Value == null)
        {
            return;
        }

        selectedMachine = e.Value.ToString() ?? "";
    }

    private async Task OpenExampleMachine()
    {
        if (string.IsNullOrEmpty(selectedMachine))
        {
            return;
        }

        if (globalService.ExampleMachines.TryGetValue(selectedMachine, out var fileContent))
        {
            await ReceiveMachineFileContent(fileContent);
            execService.CompileCode();
            pramMachine.GetInteractiveOutputMemory.Clear();
        }
    }
}
