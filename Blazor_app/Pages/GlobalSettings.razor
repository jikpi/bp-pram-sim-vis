@page "/settings"
@using Blazor_app.Services
@using PRAM_lib.Machine
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@inject GlobalService globalService
@inject PramMachine pramMachine

<div class="container mt-5">
    <h3 class="text-center mb-4">Settings</h3>

    <div class="d-flex flex-column align-items-center">

        <div class="form-group w-50 mb-3">
            <h3>Run configuration</h3>

            <div class="form-group mb-1">
                <label for="autoStepSpeedSlider">Auto Step Speed</label>
                <input type="range" class="form-control-range" id="autoStepSpeedSlider"
                       min="@globalService.MinAutoStepSpeed" max="@globalService.MaxAutoStepSpeed" value="@globalService.AutoStepSpeed"
                       @onchange="AutoStepSpeedChanged">
                <span>@globalService.AutoStepSpeed</span>
            </div>

            <div class="form-group mb-1">
                <input type="checkbox" @bind="globalService.HideMemoryCells" id="hideMemoryCellsCheckbox" aria-label="Hide unset memory cells">
                <label for="hideMemoryCellsCheckbox" class="ms-2">Hide unset memory cells</label>
            </div>

            <div class="form-group mb-1">
                <input type="checkbox" @bind="globalService.SaveHistory" id="savehistorycheckbox" aria-label="Save history">
                <label for="savehistorycheckbox" class="ms-2">Save history</label>
            </div>

            <div class="form-group mb-1">
                <input type="checkbox" @bind="globalService.FixedCode" id="fixedcodecheckbox" aria-label="Fix code in place">
                <label for="fixedcodecheckbox" class="ms-2">Fix code in place</label>
                <label for="fixedCodeLinesSlider">Length:</label>
                <input type="range" class="form-control-range" id="fixedCodeLinesSlider"
                       min="@globalService.MinFixedCodeLength" max="@globalService.MaxFixedCodeLength" value="@globalService.FixedCodeLength"
                       @onchange="FixedCodeLengthChanged">
                <span>@globalService.FixedCodeLength</span>
            </div>
        </div>



        <div class="form-group w-50 mb-3">
            <h3>Regex import/export</h3>
            <input type="file" id="fileInput" style="display:none" onchange="uploadFileToBlazor()" />
            <button type="button" class="btn btn-primary"
                    @onclick="ImportRegex">
                Import regex
            </button>
            <button type="button" class="btn btn-secondary"
                    @onclick="ExportRegex">
                Export regex
            </button>
            <button type="button" class="btn btn-warning"
                    @onclick="ResetRegex">
                Reset regex
            </button>

        </div>

        <div class="form-group w-50 mb-3">
            <h3>Regex edit</h3>
            <p>Editing the instruction regex of the machine is not officially supported and may expose critical aspects of its internal functionality. Please proceed with caution.</p>
            <button type="button" class="btn btn-primary"
                    @onclick="NavigateToRegexSettings">
                I understand, continue
            </button>
        </div>
    </div>
</div>

@code {

    private void AutoStepSpeedChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newValue))
        {
            globalService.SetAutoStepSpeed(newValue);
        }
    }

    private void FixedCodeLengthChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newValue))
        {
            globalService.SetFixedCodeLength(newValue);
        }
    }

    private void ResetRegex()
    {
        pramMachine.InstructionRegex.ResetToDefault();
        globalService.SetLastState("All regex have been reset", GlobalService.LastStateUniform.Note);
    }

    private void NavigateToRegexSettings()
    {
        navigationManager.NavigateTo("/regexsettings");
    }

    private void ImportRegex()
    {
        var dotNetReference = DotNetObjectReference.Create(this);
        JSRuntime.InvokeVoidAsync("initializeUpload", dotNetReference);
    }

    [JSInvokable]
    public Task ReceiveFileContent(string fileContent)
    {
        if (string.IsNullOrEmpty(fileContent))
        {
            globalService.SetLastState("File refused, it might be too large.", GlobalService.LastStateUniform.Error);
            return Task.CompletedTask;
        }

        bool result = pramMachine.InstructionRegex.LoadFromText(fileContent, out string errorMessage);

        if (!result)
        {
            globalService.SetLastState(errorMessage, GlobalService.LastStateUniform.Error);
        }
        else
        {
            globalService.SetLastState("Regex imported successfully", GlobalService.LastStateUniform.Note);
        }

        return Task.CompletedTask;
    }

    private async Task ExportRegex()
    {
        try
        {
            string json = pramMachine.InstructionRegex.SaveToText();
            await JSRuntime.InvokeVoidAsync("downloadFileFromBlazor", "regex.txt", "text/plain", json);
        }
        catch (Exception)
        {
            globalService.SetLastState("Failed to export regex", GlobalService.LastStateUniform.Error);
        }
    }
}
